#!/bin/bash\n\n# This script sets up a Bastion Host for secure SSH access to private resources.\n\necho \"Setting up Bastion Host...\"\n\n# --- Configuration (EDIT THESE) ---\n# Replace with the name of the EC2 Key Pair you created in the AWS Console (eu-west-1)\n# Make sure you have the corresponding .pem file saved locally.\nBASTION_KEY_PAIR_NAME=\"feature-poll-bastion-key\"\n\n# Replace with YOUR current public IPv4 address, followed by /32\n# Example: \"81.100.99.55/32\"\n# Find your IP by searching \"what is my ip address\" on Google.\nYOUR_PUBLIC_IP_CIDR=\"37.228.206.27/32\"\n\n# --- End Configuration ---\n\n# Get the directory where the script is located\nSCRIPT_DIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\"\n\n# Source primary variables\nif [ -f \"$SCRIPT_DIR/01-setup-variables.sh\" ]; then\n    source \"$SCRIPT_DIR/01-setup-variables.sh\"\nelse\n    echo \"Error: 01-setup-variables.sh not found.\"\n    exit 1\nfi\n\n# Source VPC and RDS configs (needed for VPC ID, Public Subnet, RDS SG ID)\nif [ -f \"$SCRIPT_DIR/vpc-config.sh\" ]; then\n    source \"$SCRIPT_DIR/vpc-config.sh\"\nelse\n    echo \"Error: vpc-config.sh not found. Run 03-create-vpc.sh first.\"\n    exit 1\nfi\nif [ -f \"$SCRIPT_DIR/rds-config.sh\" ]; then\n    source \"$SCRIPT_DIR/rds-config.sh\" # Loads SECURITY_GROUP_ID as DB_SG_ID\n    DB_SG_ID=$SECURITY_GROUP_ID\nelse\n    echo \"Error: rds-config.sh not found. Run 04-create-rds.sh first.\"\n    exit 1\nfi\n\n# --- Validate Configuration ---\nif [ \"$BASTION_KEY_PAIR_NAME\" == \"YOUR_KEY_PAIR_NAME\" ] || [ -z \"$BASTION_KEY_PAIR_NAME\" ]; then\n    echo \"Error: Please edit this script and set the BASTION_KEY_PAIR_NAME variable.\"\n    exit 1\nfi\nif [ \"$YOUR_PUBLIC_IP_CIDR\" == \"YOUR_IP_ADDRESS/32\" ] || [ -z \"$YOUR_PUBLIC_IP_CIDR\" ]; then\n    echo \"Error: Please edit this script and set the YOUR_PUBLIC_IP_CIDR variable.\"\n    exit 1\nfi\nif ! [[ \"$YOUR_PUBLIC_IP_CIDR\" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+/32$ ]]; then\n    echo \"Error: YOUR_PUBLIC_IP_CIDR format looks incorrect. Should be like '1.2.3.4/32'.\"\n    exit 1\nfi\n\n\n# --- Allocate Elastic IP for Bastion --- \necho \"Checking/Allocating Elastic IP for Bastion Host...\"\nBASTION_CONFIG_FILE=\"$SCRIPT_DIR/bastion-config.sh\"\n\n# Check if we already stored an allocation ID\nif [ -f \"$BASTION_CONFIG_FILE\" ]; then\n    source \"$BASTION_CONFIG_FILE\" # Loads BASTION_EIP_ALLOCATION_ID, BASTION_EIP_ADDRESS\nfi\n\n# Try to describe the EIP using the stored ID\nEIP_EXISTS=false\nif [ ! -z \"$BASTION_EIP_ALLOCATION_ID\" ]; then\n    DESCRIBED_EIP_ADDRESS=$(aws ec2 describe-addresses --allocation-ids $BASTION_EIP_ALLOCATION_ID --query 'Addresses[0].PublicIp' --output text --region $AWS_REGION 2>/dev/null)\n    if [ $? -eq 0 ] && [ ! -z \"$DESCRIBED_EIP_ADDRESS\" ]; then\n        echo \"Found existing Bastion Elastic IP: $DESCRIBED_EIP_ADDRESS (Allocation ID: $BASTION_EIP_ALLOCATION_ID)\"\n        BASTION_EIP_ADDRESS=$DESCRIBED_EIP_ADDRESS\n        EIP_EXISTS=true\n    else\n        echo \"Stored Bastion EIP Allocation ID $BASTION_EIP_ALLOCATION_ID not found or invalid. Will allocate a new one.\"\n        BASTION_EIP_ALLOCATION_ID=\"\"\n        BASTION_EIP_ADDRESS=\"\"\n    fi\nfi\n\n# Allocate if it doesn't exist or wasn't found\nif [ \"$EIP_EXISTS\" = false ]; then\n    echo \"Allocating new Elastic IP for Bastion...\"\n    ALLOCATION_RESULT=$(aws ec2 allocate-address --domain vpc --query '[AllocationId, PublicIp]' --output text --region $AWS_REGION)\n    if [ $? -ne 0 ] || [ -z \"$ALLOCATION_RESULT\" ]; then echo \"Failed to allocate Elastic IP for Bastion\"; exit 1; fi\n    BASTION_EIP_ALLOCATION_ID=$(echo $ALLOCATION_RESULT | cut -d' ' -f1)\n    BASTION_EIP_ADDRESS=$(echo $ALLOCATION_RESULT | cut -d' ' -f2)\n    echo \"Allocated Bastion Elastic IP: $BASTION_EIP_ADDRESS (Allocation ID: $BASTION_EIP_ALLOCATION_ID)\"\n    # Save the new IDs\n    echo \"export BASTION_EIP_ALLOCATION_ID=\\\"$BASTION_EIP_ALLOCATION_ID\\\"\" > \"$BASTION_CONFIG_FILE\"\n    echo \"export BASTION_EIP_ADDRESS=\\\"$BASTION_EIP_ADDRESS\\\"\" >> \"$BASTION_CONFIG_FILE\"\n    chmod +x \"$BASTION_CONFIG_FILE\"\nfi\n\n# --- Check/Create Bastion Security Group ---\nBASTION_SG_NAME=\"${APP_NAME}-bastion-sg\"\necho \"Checking/Creating Bastion Security Group: $BASTION_SG_NAME...\"\nBASTION_SG_ID=$(aws ec2 describe-security-groups --filters Name=group-name,Values=$BASTION_SG_NAME Name=vpc-id,Values=$VPC_ID --query 'SecurityGroups[0].GroupId' --output text --region $AWS_REGION 2>/dev/null)\n\nif [ -z \"$BASTION_SG_ID\" ] || [ \"$BASTION_SG_ID\" == \"None\" ]; then\n  echo \"Bastion Security Group not found. Creating...\"\n  BASTION_SG_ID=$(aws ec2 create-security-group \\\n    --group-name $BASTION_SG_NAME \\\n    --description \"Security group for ${APP_NAME} Bastion Host\" \\\n    --vpc-id $VPC_ID \\\n    --query 'GroupId' \\\n    --output text \\\n    --tag-specifications \"ResourceType=security-group,Tags=[{Key=AppName,Value='$APP_NAME'},{Key=Role,Value=Bastion}]\" \\\n    --region $AWS_REGION)\n  if [ $? -ne 0 ] || [ -z \"$BASTION_SG_ID\" ]; then echo \"Failed to create Bastion Security Group\"; exit 1; fi\n  echo \"Created Bastion security group: $BASTION_SG_ID\"\n\n  # Authorize SSH ONLY from the specified IP CIDR when creating\n  echo \"Authorizing SSH ingress from $YOUR_PUBLIC_IP_CIDR to Bastion SG $BASTION_SG_ID...\"\n  aws ec2 authorize-security-group-ingress --group-id $BASTION_SG_ID --protocol tcp --port 22 --cidr $YOUR_PUBLIC_IP_CIDR --region $AWS_REGION\n  if [ $? -ne 0 ]; then echo \"Failed to add SSH ingress rule to Bastion SG\"; exit 1; fi\n  echo \"SSH ingress rule added.\"\nelse\n  echo \"Found existing Bastion security group: $BASTION_SG_ID\"\n  echo \"INFO: Ensure SSH ingress rule for $YOUR_PUBLIC_IP_CIDR exists. Manual update might be needed if your IP changed.\"\n  # Optional TODO: Add logic here to check/update the ingress rule if IP changed.\nfi\n\n# --- Check/Create EC2 Instance (Bastion Host) ---\necho \"Checking/Creating Bastion EC2 Instance...\"\nBASTION_INSTANCE_ID=$(aws ec2 describe-instances \\\n    --filters \"Name=tag:AppName,Values=$APP_NAME\" \"Name=tag:Role,Values=Bastion\" \"Name=instance-state-name,Values=pending,running,stopping,stopped\" \\\n    --query 'Reservations[*].Instances[*].InstanceId' \\\n    --output text --region $AWS_REGION 2>/dev/null)\n\nif [ -z \"$BASTION_INSTANCE_ID\" ] || [ \"$BASTION_INSTANCE_ID\" == \"None\" ]; then\n    echo \"Bastion instance not found. Launching...\"\n    # Find latest Amazon Linux 2023 AMI\n    echo \"Finding latest Amazon Linux 2023 AMI...\"\n    AMI_ID=$(aws ec2 describe-images \\\n        --owners amazon \\\n        --filters 'Name=name,Values=al2023-ami-2023.*-kernel-*-x86_64' 'Name=state,Values=available' 'Name=architecture,Values=x86_64' \\\n        --query 'sort_by(Images, &CreationDate)[-1].ImageId' \\\n        --output text --region $AWS_REGION)\n    if [ $? -ne 0 ] || [ -z \"$AMI_ID\" ] || [ \"$AMI_ID\" == \"None\" ]; then\n        echo \"Error: Could not find latest Amazon Linux 2023 AMI.\"\n        exit 1\n    fi\n    echo \"Using AMI ID: $AMI_ID\"\n\n    # Launch instance in the first public subnet\n    INSTANCE_TYPE=\"t3.micro\" # Or t4g.micro if using ARM AMI\n    echo \"Launching $INSTANCE_TYPE instance in Public Subnet 1 ($PUBLIC_SUBNET_1_ID)...\"\n    RUN_RESULT=$(aws ec2 run-instances \\\n        --image-id $AMI_ID \\\n        --instance-type $INSTANCE_TYPE \\\n        --key-name \"$BASTION_KEY_PAIR_NAME\" \\\n        --security-group-ids $BASTION_SG_ID \\\n        --subnet-id $PUBLIC_SUBNET_1_ID \\\n        --associate-public-ip-address false `# We will associate the EIP manually` \\ \n        --block-device-mappings '[{\"DeviceName\":\"/dev/xvda\",\"Ebs\":{\"VolumeSize\":8,\"VolumeType\":\"gp3\"}}]' \\\n        --tag-specifications \"ResourceType=instance,Tags=[{Key=AppName,Value=$APP_NAME},{Key=Name,Value=${APP_NAME}-bastion},{Key=Role,Value=Bastion}]\" \"ResourceType=volume,Tags=[{Key=AppName,Value=$APP_NAME},{Key=Name,Value=${APP_NAME}-bastion-volume}]\" \\\n        --query 'Instances[0].InstanceId' \\\n        --output text --region $AWS_REGION)\n\n    if [ $? -ne 0 ] || [ -z \"$RUN_RESULT\" ]; then echo \"Failed to launch Bastion instance\"; exit 1; fi\n    BASTION_INSTANCE_ID=$RUN_RESULT\n    echo \"Launched Bastion instance: $BASTION_INSTANCE_ID. Waiting for it to enter 'running' state...\"\n\n    aws ec2 wait instance-running --instance-ids $BASTION_INSTANCE_ID --region $AWS_REGION\n    if [ $? -ne 0 ]; then echo \"Error: Wait failed. Bastion instance $BASTION_INSTANCE_ID did not enter running state.\"; exit 1; fi\n    echo \"Bastion instance is running.\"\n\n    # Associate the Elastic IP\n    echo \"Associating Elastic IP $BASTION_EIP_ADDRESS with instance $BASTION_INSTANCE_ID...\"\n    aws ec2 associate-address --instance-id $BASTION_INSTANCE_ID --allocation-id $BASTION_EIP_ALLOCATION_ID --region $AWS_REGION\n    if [ $? -ne 0 ]; then echo \"Failed to associate Elastic IP with Bastion instance\"; exit 1; fi\n    echo \"Elastic IP associated.\"\nelse\n    echo \"Found existing Bastion instance: $BASTION_INSTANCE_ID\"\n    # Ensure EIP is associated if instance exists but EIP was just re-allocated\n    CURRENT_ASSOCIATION=$(aws ec2 describe-addresses --allocation-ids $BASTION_EIP_ALLOCATION_ID --query 'Addresses[0].AssociationId' --output text --region $AWS_REGION 2>/dev/null)\n    if [ -z \"$CURRENT_ASSOCIATION\" ] || [ \"$CURRENT_ASSOCIATION\" == \"None\" ]; then\n         echo \"Associating Elastic IP $BASTION_EIP_ADDRESS with existing instance $BASTION_INSTANCE_ID...\"\n         aws ec2 associate-address --instance-id $BASTION_INSTANCE_ID --allocation-id $BASTION_EIP_ALLOCATION_ID --region $AWS_REGION || echo \"WARN: Failed to associate Elastic IP with existing Bastion instance.\"\n    fi\nfi\n\n# --- Update RDS Security Group --- \necho \"Updating RDS Security Group ($DB_SG_ID) to allow ingress from Bastion SG ($BASTION_SG_ID)...\"\n# Check if rule already exists\nRULE_EXISTS=$(aws ec2 describe-security-group-rules \\\n    --filters Name=group-id,Values=$DB_SG_ID Name=ip-protocol,Values=tcp Name=from-port,Values=5432 Name=to-port,Values=5432 Name=source-group-id,Values=$BASTION_SG_ID \\\n    --query 'SecurityGroupRules[0].SecurityGroupRuleId' --output text --region $AWS_REGION 2>/dev/null)\n\nif [ -z \"$RULE_EXISTS\" ] || [ \"$RULE_EXISTS\" == \"None\" ]; then\n    echo \"Rule not found. Adding ingress rule to RDS SG...\"\n    aws ec2 authorize-security-group-ingress \\\n        --group-id $DB_SG_ID \\\n        --protocol tcp \\\n        --port 5432 \\\n        --source-group $BASTION_SG_ID \\\n        --region $AWS_REGION\n    if [ $? -ne 0 ]; then echo \"Failed to add ingress rule from Bastion to RDS SG\"; exit 1; fi\n    echo \"RDS SG ingress rule added.\"\nelse\n    echo \"Ingress rule from Bastion SG to RDS SG already exists.\"\nfi\n\n# --- Output Connection Info --- \nRDS_ENDPOINT=$(aws rds describe-db-instances --db-instance-identifier \"${APP_NAME}-db\" --query 'DBInstances[0].Endpoint.Address' --output text --region $AWS_REGION)\n\necho \"\"\necho \"-----------------------------------------------------\"\necho \"Bastion Host Setup Complete!\"\necho \"\"\necho \"Bastion Public IP: $BASTION_EIP_ADDRESS\"\necho \"Bastion Instance ID: $BASTION_INSTANCE_ID\"\necho \"Key Pair Name: $BASTION_KEY_PAIR_NAME\"\necho \"RDS Endpoint: $RDS_ENDPOINT\"\necho \"\"\necho \"To connect to your RDS database via the Bastion Host:\"\necho \"1. Make sure your '$BASTION_KEY_PAIR_NAME.pem' file has correct permissions (chmod 400 /path/to/$BASTION_KEY_PAIR_NAME.pem)\"\necho \"2. Open a NEW local terminal and run the following SSH command:\"\necho \"   ssh -i /path/to/$BASTION_KEY_PAIR_NAME.pem ec2-user@$BASTION_EIP_ADDRESS -L 5432:$RDS_ENDPOINT:5432 -N\"\n# Note: Use al2023 default username 'ec2-user'. Use 'ubuntu' for Ubuntu AMIs, etc.\necho \"   (Replace '/path/to/$BASTION_KEY_PAIR_NAME.pem' with the actual path to your key file)\"\necho \"   (The '-N' flag prevents executing remote commands - good for just tunneling)\"\necho \"3. Keep that SSH terminal running.\"\necho \"4. In ANOTHER local terminal or your database client, connect to PostgreSQL using:\"\necho \"   Host: localhost\"\necho \"   Port: 5432\"\necho \"   Database: $DB_NAME\"\necho \"   Username: $DB_USERNAME\"\necho \"   Password: [The password generated or set in 01-setup-variables.sh]\"\necho \"-----------------------------------------------------\"\n\necho \"Bastion setup script finished.\"\n 