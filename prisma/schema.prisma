generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String           @id @default(cuid())
  name                     String?
  email                    String           @unique
  emailVerified            DateTime?
  password                 String?
  image                    String?
  role                     String           @default("USER")
  createdAt                DateTime         @default(now())
  updatedAt                DateTime         @updatedAt
  emailVerificationToken   String?
  emailVerificationExpires DateTime?
  resetPasswordToken       String?
  resetPasswordExpires     DateTime?
  activities               Activity[]
  accounts                 Account[]
  featureRequests          FeatureRequest[]
  sessions                 Session[]
  votes                    Vote[]

  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @map("updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model FeatureRequest {
  id          String     @id @default(cuid())
  title       String     @db.VarChar(100)
  description String     @db.VarChar(500)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  status      String     @default("OPEN")
  userId      String
  activities  Activity[]
  user        User       @relation(fields: [userId], references: [id])
  votes       Vote[]

  @@unique([title, userId])
  @@map("feature_requests")
}

model Vote {
  id               String         @id @default(cuid())
  createdAt        DateTime       @default(now())
  userId           String
  featureRequestId String
  activityId       String?
  activity         Activity?      @relation(fields: [activityId], references: [id])
  featureRequest   FeatureRequest @relation(fields: [featureRequestId], references: [id])
  user             User           @relation(fields: [userId], references: [id])

  @@unique([userId, featureRequestId])
  @@map("votes")
}

model Activity {
  id                  String          @id @default(cuid())
  type                ActivityType
  createdAt           DateTime        @default(now())
  userId              String
  featureRequestId    String?
  deletedRequestTitle String?
  featureRequest      FeatureRequest? @relation(fields: [featureRequestId], references: [id])
  user                User            @relation(fields: [userId], references: [id])
  votes               Vote[]

  @@index([userId])
  @@index([featureRequestId])
}

enum Role {
  USER
  ADMIN
}

enum ActivityType {
  created
  voted
  unvoted
  edited
  deleted
  status_changed
}
